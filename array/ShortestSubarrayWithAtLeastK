/*

Return the length of the shortest, non-empty, contiguous subarray of A with sum at least K.

If there is no non-empty subarray with sum at least K, return -1.

 
Example 1:
Input: A = [1], K = 1
Output: 1

Example 2:
Input: A = [1,2], K = 4
Output: -1

Example 3:
Input: A = [2,-1,2], K = 3
Output: 3

Leetcode: https://leetcode.com/problems/shortest-subarray-with-sum-at-least-k/
Difficulty: Hard

*/

class Solution {
    public int shortestSubarray(int[] A, int K) {
        int solution = Integer.MAX_VALUE;
        Deque<Integer> deque = new ArrayDeque<>();
        int[] prefix = new int[A.length + 1];
        
        for (int i = 1; i < prefix.length; i++) {
            prefix[i] = prefix[i - 1] + A[i - 1];
        }
        
        for (int i = 0; i < prefix.length; i++) {
            while (deque.size() > 0 && prefix[i] - prefix[deque.peekFirst()] >= K) {
                solution = Math.min(solution, i - deque.pollFirst());
            }
            
            while (deque.size() > 0 && prefix[i] <= prefix[deque.peekLast()]) {
                deque.pollLast();
            }
            
            deque.offerLast(i);
        }
        
        return solution == Integer.MAX_VALUE ? -1 : solution;
    }
}

/*

Time: O(n), each element is getting offered and polled at most once.
Space: O(n).

This problem is very similar to the traditional sliding window problem. The only difference from this is that now we allow negative
values and therefore cannot just "slide" the window greedily. If we do the problem by hand, we can see that we need a somehow "sorted"
array that is in ascending order (smallest first) with increasing index. 

Imagine how we would use this "sorted" array. Let's call this sorted int[] sorted for now. Also magine we have in int[] prefix that 
holds the prefix sum up to A[i]. Then at each index i, if prefix[i] - sorted[i] >= K, we know this is a possible answer. And whenever
we see prefix[i] <= sorted[n], we know this sorted[n] can never be a choice. We can use deque to represent our "sorted" array. 

More at: https://leetcode.com/problems/shortest-subarray-with-sum-at-least-k/discuss/143726/C%2B%2BJavaPython-O(N)-Using-Deque

*/
